# コード品質について

ruff, isort, black, mypy をインストールしてあります.
作業完了前に必ずこれらのツールを用いて, コードの点検と整形を行ってください.

pytestを成功させてから, ruffなどのツールを使ったチェックを行ってください.


# テストコード

testable なコード記述を心がけてください

pytest, pytest-cov をインストールしてあります. コード記述の後には,
基本的にコードカバレッジを100%を目指したテストコードを用意してください.

100%のカバレッジを確保できない場合は, "# pragma: no cover" などのコメントでそれを示してください.h

一方で, このアプリケーションはDiscord上で動かすことを想定したものです.
Discord の要素やUIなどをテストコードで確認することは難しいことがあるので, GUIのためのコードとロジックは分離することや,
テストしやすい依存関係を作ることを心がけてください.

Discord のUIのためのテストを無理やり書くようなことも避けてください


# poetry

プロジェクト管理にpoetry を用いています.

パッケージ追加が必要なときには, `poetry add` コマンドを使ってください.
pyproject.toml を直接編集しないでください.

実装に必要とされるパッケージは `poetry add` コマンドを使い,
実装に必要とはいえない例えばテスト関連のツールなどは `poetry add --group dev` コマンドを使って導入してください

# github

このプロジェクトは次のリポジトリで管理しています.

https://github.com/kuchida1981/mahjong-scorer-discortbot

作業指示はGitHubイシューで行わせていただきます.

コードの変更などを行った場合, 適切なブランチを作成し, プルリクエストを作成するところまで行ってください.

MCP経由でのプルリクエスト作成ができればそれを行い, できなければ `gh` コマンド (GitHub CLI) でのプルリクエスト作成を試みてください.
